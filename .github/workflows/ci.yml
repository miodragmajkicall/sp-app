name: CI

on:
  push:
    branches: [ main, "feature/**", "fix/**" ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: pip

    - name: Install host Python deps
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt

    - name: Start stack (Docker Compose)
      run: |
        docker compose up -d
        docker compose ps

    - name: Wait for Postgres (inside db container)
      shell: bash
      run: |
        echo "Waiting for Postgres to accept connections..."
        USER="${POSTGRES_USER:-postgres}"
        DB="${POSTGRES_DB:-postgres}"
        for i in {1..60}; do
          if docker compose exec -T db pg_isready -U "$USER" -d "$DB" -h 127.0.0.1 >/dev/null 2>&1; then
            echo "✅ Postgres is ready"
            exit 0
          fi
          sleep 2
        done
        echo "::error::Postgres not ready in time"
        docker compose logs db || true
        exit 1

    - name: Wait for API to be ready (HTTP only)
      shell: bash
      run: |
        echo "Waiting for API on :8000 (/health only before migrations)..."
        for i in {1..120}; do
          if curl -fsS http://localhost:8000/health >/dev/null; then
            echo "✅ API is up"
            exit 0
          fi
          sleep 1
        done
        echo "::error::API /health not ready in time"; docker compose logs api || true
        exit 1

    - name: Run migrations + seed
      run: |
        docker compose exec -T api alembic upgrade head
        docker compose exec -T api python -m app.seed

    - name: Check DB health after migrations
      shell: bash
      run: |
        echo "Checking /db/health after migrations..."
        for i in {1..60}; do
          if curl -fsS http://localhost:8000/db/health >/dev/null; then
            echo "✅ DB health OK"
            exit 0
          fi
          sleep 2
        done
        echo "::error::/db/health never became ready"; docker compose logs api db || true
        exit 1

    - name: Run backend tests
      run: pytest -q backend/tests

    - name: Print logs on failure
      if: failure()
      run: docker compose logs --tail=200 api db || true

    - name: Shutdown stack
      if: always()
      run: docker compose down -v
